package mnj.ont.model.lov.views;

import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Jun 13 16:42:44 PKT 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SaleOrderLOVRowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        HeaderId {
            public Object get(SaleOrderLOVRowImpl obj) {
                return obj.getHeaderId();
            }

            public void put(SaleOrderLOVRowImpl obj, Object value) {
                obj.setHeaderId((Number)value);
            }
        }
        ,
        OrderNumber {
            public Object get(SaleOrderLOVRowImpl obj) {
                return obj.getOrderNumber();
            }

            public void put(SaleOrderLOVRowImpl obj, Object value) {
                obj.setOrderNumber((Number)value);
            }
        }
        ,
        Description {
            public Object get(SaleOrderLOVRowImpl obj) {
                return obj.getDescription();
            }

            public void put(SaleOrderLOVRowImpl obj, Object value) {
                obj.setDescription((String)value);
            }
        }
        ,
        InventoryItemId {
            public Object get(SaleOrderLOVRowImpl obj) {
                return obj.getInventoryItemId();
            }

            public void put(SaleOrderLOVRowImpl obj, Object value) {
                obj.setInventoryItemId((Number)value);
            }
        }
        ,
        Stn {
            public Object get(SaleOrderLOVRowImpl obj) {
                return obj.getStn();
            }

            public void put(SaleOrderLOVRowImpl obj, Object value) {
                obj.setStn((String)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(SaleOrderLOVRowImpl object);

        public abstract void put(SaleOrderLOVRowImpl object, Object value);

        public int index() {
            return SaleOrderLOVRowImpl.AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return SaleOrderLOVRowImpl.AttributesEnum.firstIndex() + SaleOrderLOVRowImpl.AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = SaleOrderLOVRowImpl.AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int HEADERID = SaleOrderLOVRowImpl.AttributesEnum.HeaderId.index();
    public static final int ORDERNUMBER = SaleOrderLOVRowImpl.AttributesEnum.OrderNumber.index();
    public static final int DESCRIPTION = SaleOrderLOVRowImpl.AttributesEnum.Description.index();
    public static final int INVENTORYITEMID = SaleOrderLOVRowImpl.AttributesEnum.InventoryItemId.index();
    public static final int STN = SaleOrderLOVRowImpl.AttributesEnum.Stn.index();

    /**
     * This is the default constructor (do not remove).
     */
    public SaleOrderLOVRowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute HeaderId.
     * @return the HeaderId
     */
    public Number getHeaderId() {
        return (Number) getAttributeInternal(HEADERID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute HeaderId.
     * @param value value to set the  HeaderId
     */
    public void setHeaderId(Number value) {
        setAttributeInternal(HEADERID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute OrderNumber.
     * @return the OrderNumber
     */
    public Number getOrderNumber() {
        return (Number) getAttributeInternal(ORDERNUMBER);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute OrderNumber.
     * @param value value to set the  OrderNumber
     */
    public void setOrderNumber(Number value) {
        setAttributeInternal(ORDERNUMBER, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Description.
     * @return the Description
     */
    public String getDescription() {
        return (String) getAttributeInternal(DESCRIPTION);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Description.
     * @param value value to set the  Description
     */
    public void setDescription(String value) {
        setAttributeInternal(DESCRIPTION, value);
    }

    /**
     * Gets the attribute value for the calculated attribute InventoryItemId.
     * @return the InventoryItemId
     */
    public Number getInventoryItemId() {
        return (Number) getAttributeInternal(INVENTORYITEMID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute InventoryItemId.
     * @param value value to set the  InventoryItemId
     */
    public void setInventoryItemId(Number value) {
        setAttributeInternal(INVENTORYITEMID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Stn.
     * @return the Stn
     */
    public String getStn() {
        return (String) getAttributeInternal(STN);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Stn.
     * @param value value to set the  Stn
     */
    public void setStn(String value) {
        setAttributeInternal(STN, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= SaleOrderLOVRowImpl.AttributesEnum.firstIndex()) && (index < SaleOrderLOVRowImpl.AttributesEnum.count())) {
            return SaleOrderLOVRowImpl.AttributesEnum.staticValues()[index - SaleOrderLOVRowImpl.AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= SaleOrderLOVRowImpl.AttributesEnum.firstIndex()) && (index < SaleOrderLOVRowImpl.AttributesEnum.count())) {
            SaleOrderLOVRowImpl.AttributesEnum.staticValues()[index - SaleOrderLOVRowImpl.AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
